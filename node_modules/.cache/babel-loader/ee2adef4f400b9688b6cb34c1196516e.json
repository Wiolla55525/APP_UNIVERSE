{"ast":null,"code":"var _s = $RefreshSig$();\nexport const useTemperature = city => {\n  _s();\n  const [weather, setWeathet] = useState(null);\n  useEffect(() => {\n    if (!city) {\n      return;\n    }\n    const myAbortController = new AbortController();\n    (async () => {\n      try {\n        const currentWeatherFetch = await fetch(`v1/places/${city}/forecasts/long-term`, {\n          signal: myAbortController.signal\n        });\n        const json = await currentWeatherFetch.json();\n        const currentWeather = json.forecastTimestamps.filter(timeUtc => {\n          return timeUtc.forecastTimeUtc;\n        });\n        setWeather(currentWeather[0].airTemperature);\n      } catch (e) {\n        console.log(e);\n        if (!myAbortController.signal.aborted) {\n          return {\n            error: e.message\n          };\n        }\n      }\n    })();\n    return () => {\n      myAbortController.abort();\n    };\n  }, [city]);\n  return weather;\n};\n_s(useTemperature, \"XzOrDzdnmvYh50oS8QlvwiyQ+nY=\");","map":{"version":3,"names":["useTemperature","city","weather","setWeathet","useState","useEffect","myAbortController","AbortController","currentWeatherFetch","fetch","signal","json","currentWeather","forecastTimestamps","filter","timeUtc","forecastTimeUtc","setWeather","airTemperature","e","console","log","aborted","error","message","abort"],"sources":["C:/Users/CodeAcademy/Desktop/My Projects/cafe01-town-hall-new/studentai/violetaVinogrodska/app-universe/src/Hooks.jsx"],"sourcesContent":["export const useTemperature= (city) =>{\n    const [weather, setWeathet] = useState(null)\n\n\n    useEffect(() => {\n        if (!city) {\n          return;\n        }\n        const myAbortController = new AbortController();\n    \n        (async () => {\n          try {\n            const currentWeatherFetch = await fetch(`v1/places/${city}/forecasts/long-term`, {\n              signal: myAbortController.signal,\n            });\n            const json = await currentWeatherFetch.json();\n            const currentWeather = json.forecastTimestamps.filter((timeUtc) => {\n              return timeUtc.forecastTimeUtc;\n            });\n            setWeather(currentWeather[0].airTemperature);\n          } catch (e) {\n            console.log(e);\n            if (!myAbortController.signal.aborted) {\n              return { error: e.message };\n            }\n          }\n        })();\n        return () => {\n          myAbortController.abort();\n        };\n      }, [city]);\n\n      return weather;\n}"],"mappings":";AAAA,OAAO,MAAMA,cAAc,GAAGC,IAAI,IAAI;EAAA;EAClC,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGC,QAAQ,CAAC,IAAI,CAAC;EAG5CC,SAAS,CAAC,MAAM;IACZ,IAAI,CAACJ,IAAI,EAAE;MACT;IACF;IACA,MAAMK,iBAAiB,GAAG,IAAIC,eAAe,EAAE;IAE/C,CAAC,YAAY;MACX,IAAI;QACF,MAAMC,mBAAmB,GAAG,MAAMC,KAAK,CAAE,aAAYR,IAAK,sBAAqB,EAAE;UAC/ES,MAAM,EAAEJ,iBAAiB,CAACI;QAC5B,CAAC,CAAC;QACF,MAAMC,IAAI,GAAG,MAAMH,mBAAmB,CAACG,IAAI,EAAE;QAC7C,MAAMC,cAAc,GAAGD,IAAI,CAACE,kBAAkB,CAACC,MAAM,CAAEC,OAAO,IAAK;UACjE,OAAOA,OAAO,CAACC,eAAe;QAChC,CAAC,CAAC;QACFC,UAAU,CAACL,cAAc,CAAC,CAAC,CAAC,CAACM,cAAc,CAAC;MAC9C,CAAC,CAAC,OAAOC,CAAC,EAAE;QACVC,OAAO,CAACC,GAAG,CAACF,CAAC,CAAC;QACd,IAAI,CAACb,iBAAiB,CAACI,MAAM,CAACY,OAAO,EAAE;UACrC,OAAO;YAAEC,KAAK,EAAEJ,CAAC,CAACK;UAAQ,CAAC;QAC7B;MACF;IACF,CAAC,GAAG;IACJ,OAAO,MAAM;MACXlB,iBAAiB,CAACmB,KAAK,EAAE;IAC3B,CAAC;EACH,CAAC,EAAE,CAACxB,IAAI,CAAC,CAAC;EAEV,OAAOC,OAAO;AACpB,CAAC;AAAA,GAjCYF,cAAc"},"metadata":{},"sourceType":"module"}